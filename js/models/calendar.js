// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone', 'collections/dates', 'models/date'], function(Backbone, DatesCollection, DateModel) {
  var CalendarModel;
  CalendarModel = (function(_super) {

    __extends(CalendarModel, _super);

    function CalendarModel() {
      this.adjustMonth = __bind(this.adjustMonth, this);
      return CalendarModel.__super__.constructor.apply(this, arguments);
    }

    CalendarModel.prototype.defaults = {
      daysOfWeek: ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],
      monthsOfYear: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      today: new Date(),
      current: new Date(),
      days: new DatesCollection()
    };

    CalendarModel.prototype.adjustMonth = function(num) {
      if (this.attributes.current.getDate() > 28) {
        this.attributes.current.setDate(28);
      }
      this.attributes.current.setMonth(this.attributes.current.getMonth() + num);
      this.setFirstLast();
      return App.Vent.trigger('rerender');
    };

    CalendarModel.prototype.setFirstLast = function() {
      this.firstOfMonth = new Date(this.get('current').getFullYear(), this.get('current').getMonth(), 1);
      return this.lastOfMonth = new Date(this.get('current').getFullYear(), this.get('current').getMonth() + 1, 0);
    };

    CalendarModel.prototype.initialize = function() {
      return this.fillDays();
    };

    CalendarModel.prototype.fillDays = function() {
      var i, _i, _j, _ref, _ref1, _results;
      this.setFirstLast();
      this.set('days', new DatesCollection());
      for (i = _i = 0, _ref = this.firstOfMonth.getDay(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.get('days').add(new DateModel);
      }
      _results = [];
      for (i = _j = 1, _ref1 = this.lastOfMonth.getDate(); 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
        if (i === this.get('today').getDate()) {
          _results.push(this.get('days').add(new DateModel({
            'date': new Date(this.get('current').getFullYear(), this.get('current').getMonth(), i),
            'today': true
          })));
        } else {
          _results.push(this.get('days').add(new DateModel({
            'date': new Date(this.get('current').getFullYear(), this.get('current').getMonth(), i)
          })));
        }
      }
      return _results;
    };

    return CalendarModel;

  })(Backbone.Model);
  return CalendarModel;
});
